===================================================================
Recommended Usage: ./simplecompile.sh > output.txt 2>&1
===================================================================
Tue Feb 11 02:52:15 PST 2020
Linux csslab8.uwb.edu 3.10.0-957.27.2.el7.x86_64 #1 SMP Mon Jul 29 17:46:05 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
uid=1016866(estefano) gid=2121016866(estefano) groups=2121016866(estefano),605559(lab-access) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
===================================================================
*** compiling with clang++ to create an executable called myprogram
===================================================================
clang version 7.0.1 (tags/RELEASE_701/final)
Target: x86_64-unknown-linux-gnu
Thread model: posix
InstalledDir: /opt/rh/llvm-toolset-7.0/root/usr/bin
===================================================================
*** running myprogram
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
testGraph0NotDirected
[BA 1][CB 3]
testGraph1
Done!
===================================================================
*** running clang-tidy using options from .clang-tidy
*** fix all warnings, modify .clang-tidy if necessary
*** explain all changes to .clang-tidy in README
LLVM (http://llvm.org/):
  LLVM version 7.0.1
  Optimized build.
  Default target: x86_64-unknown-linux-gnu
  Host CPU: broadwell
11621 warnings generated.
31504 warnings generated.
45819 warnings generated.
56313 warnings generated.
66826 warnings generated.
Suppressed 66827 warnings (66826 in non-user code, 1 NOLINT).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
===================================================================
*** generating new .clang-format based on LLVM style
*** running clang-format for formatting suggestions
*** examine all suggestions, fix selectively
*** formatting suggestions for ./edge.cpp
:011 OLD: //destructor
:    NEW: // destructor
:015 OLD: Edge::Edge(Vertex *From, Vertex *To, int Weight) : From{From}, To{To},
:016 OLD:                                                    Weight{Weight} {
:017 OLD: }
:018 OLD: 
:    NEW: Edge::Edge(Vertex *From, Vertex *To, int Weight)
:    NEW:     : From{From}, To{To}, Weight{Weight} {}
*** formatting suggestions for ./graph.cpp
:016 OLD: Graph::Graph(bool DirectionalEdges) : DirectionalEdges{DirectionalEdges} {
:017 OLD: }
:    NEW: Graph::Graph(bool DirectionalEdges) : DirectionalEdges{DirectionalEdges} {}
:020 OLD:     for (const auto &Val:VMap) {
:021 OLD:         delete Val.second;
:022 OLD:     }
:    NEW:   for (const auto &Val : VMap) {
:    NEW:     delete Val.second;
:    NEW:   }
:031 OLD:     ifstream File;
:032 OLD:     File.open(Filename);
:033 OLD:     int Count;
:034 OLD:     string From;
:035 OLD:     string To;
:036 OLD:     int Weight;
:037 OLD:     if (!File) {
:038 OLD:         cout << "ERROR: No File Found Matching :" << Filename;
:039 OLD:         return false;
:040 OLD:     }
:041 OLD:     File >> Count;
:042 OLD:     for (int I = 0; I < Count; ++I) {
:043 OLD:         File >> From >> To >> Weight;
:044 OLD:         if (!DirectionalEdges)
:045 OLD:             connect(To, From, Weight);
:046 OLD:         connect(From, To, Weight);
:047 OLD:     }
:048 OLD:     File.close();
:049 OLD:     return true;
:    NEW:   ifstream File;
:    NEW:   File.open(Filename);
:    NEW:   int Count;
:    NEW:   string From;
:    NEW:   string To;
:    NEW:   int Weight;
:    NEW:   if (!File) {
:    NEW:     cout << "ERROR: No File Found Matching :" << Filename;
:    NEW:     return false;
:    NEW:   }
:    NEW:   File >> Count;
:    NEW:   for (int I = 0; I < Count; ++I) {
:    NEW:     File >> From >> To >> Weight;
:    NEW:     if (!DirectionalEdges)
:    NEW:       connect(To, From, Weight);
:    NEW:     connect(From, To, Weight);
:    NEW:   }
:    NEW:   File.close();
:    NEW:   return true;
:053 OLD: int Graph::verticesSize() const {
:054 OLD:     return VMap.size();
:055 OLD: }
:    NEW: int Graph::verticesSize() const { return VMap.size(); }
:058 OLD: int Graph::edgesSize() const {
:059 OLD:     return EdgesCount;
:060 OLD: }
:    NEW: int Graph::edgesSize() const { return EdgesCount; }
:064 OLD:     if (VMap.count(Label) == 0)
:065 OLD:         return -1;
:066 OLD:     return VMap.at(Label)->Neighbors.size();
:067 OLD: 
:    NEW:   if (VMap.count(Label) == 0)
:    NEW:     return -1;
:    NEW:   return VMap.at(Label)->Neighbors.size();
:072 OLD:     if (VMap.count(Label) == 1)
:073 OLD:         return false;
:074 OLD:     VMap[Label] = new Vertex(Label);
:075 OLD:     return true;
:    NEW:   if (VMap.count(Label) == 1)
:    NEW:     return false;
:    NEW:   VMap[Label] = new Vertex(Label);
:    NEW:   return true;
:080 OLD:     return VMap.count(Label) == 1;
:    NEW:   return VMap.count(Label) == 1;
:083 OLD: //edge comparator for ascending sorting
:    NEW: // edge comparator for ascending sorting
:085 OLD:     int CompareLabels = E1->To->Label.compare(E2->To->Label);
:086 OLD:     if (CompareLabels == 0)
:087 OLD:         return (E2->Weight - E1->Weight) < 0;
:088 OLD:     return CompareLabels < 0;
:    NEW:   int CompareLabels = E1->To->Label.compare(E2->To->Label);
:    NEW:   if (CompareLabels == 0)
:    NEW:     return (E2->Weight - E1->Weight) < 0;
:    NEW:   return CompareLabels < 0;
:094 OLD:     if (VMap.count(Label) == 0)
:095 OLD:         return "";
:096 OLD:     stringstream Ss;
:097 OLD:     Vertex *V = VMap.at(Label);
:098 OLD:     vector<Edge *> List = V->Neighbors;
:099 OLD:     if (List.empty())
:100 OLD:         return "";
:101 OLD:     sort(List.begin(), List.end(), compareEdges);
:102 OLD:     for (int I = 0; I < List.size() - 1; ++I) {
:103 OLD:         Ss << *(List[I]->To) << "(" << List[I]->Weight << ")" << ",";
:104 OLD:     }
:105 OLD:     Ss << *(List[List.size() - 1]->To) << "(" << List[List.size() -
:106 OLD:             1]->Weight << ")";
:107 OLD:     return Ss.str();
:    NEW:   if (VMap.count(Label) == 0)
:    NEW:     return "";
:    NEW:   stringstream Ss;
:    NEW:   Vertex *V = VMap.at(Label);
:    NEW:   vector<Edge *> List = V->Neighbors;
:    NEW:   if (List.empty())
:    NEW:     return "";
:    NEW:   sort(List.begin(), List.end(), compareEdges);
:    NEW:   for (int I = 0; I < List.size() - 1; ++I) {
:    NEW:     Ss << *(List[I]->To) << "(" << List[I]->Weight << ")"
:    NEW:        << ",";
:    NEW:   }
:    NEW:   Ss << *(List[List.size() - 1]->To) << "(" << List[List.size() - 1]->Weight
:    NEW:      << ")";
:    NEW:   return Ss.str();
:116 OLD:     if (From == To)
:117 OLD:         return false;
:118 OLD:     Vertex *VFrom;
:119 OLD:     Vertex *VTo;
:120 OLD:     if (VMap.count(To) == 0) {
:121 OLD:         VTo = new Vertex(To);
:122 OLD:         VMap[To] = VTo;
:123 OLD:     }
:124 OLD:     if (VMap.count(From) == 0) {
:125 OLD:         VFrom = new Vertex(From);
:126 OLD:         VMap[From] = VFrom;
:127 OLD:     }
:128 OLD:     if (!isConnected(From, To)) {
:129 OLD:         VFrom = VMap[From];
:130 OLD:         VTo = VMap[To];
:131 OLD:         Edge *NewEdge = new Edge(VFrom, VTo, Weight);
:132 OLD:         VFrom->Neighbors.push_back(NewEdge);
:133 OLD:         EdgesCount++;
:134 OLD:         return true;
:135 OLD:     }
:    NEW:   if (From == To)
:    NEW:   Vertex *VFrom;
:    NEW:   Vertex *VTo;
:    NEW:   if (VMap.count(To) == 0) {
:    NEW:     VTo = new Vertex(To);
:    NEW:     VMap[To] = VTo;
:    NEW:   }
:    NEW:   if (VMap.count(From) == 0) {
:    NEW:     VFrom = new Vertex(From);
:    NEW:     VMap[From] = VFrom;
:    NEW:   }
:    NEW:   if (!isConnected(From, To)) {
:    NEW:     VFrom = VMap[From];
:    NEW:     VTo = VMap[To];
:    NEW:     Edge *NewEdge = new Edge(VFrom, VTo, Weight);
:    NEW:     VFrom->Neighbors.push_back(NewEdge);
:    NEW:     EdgesCount++;
:    NEW:     return true;
:    NEW:   }
:    NEW:   return false;
:142 OLD:     bool Disconnected = false;
:143 OLD:     Vertex *VFrom = VMap[From];
:144 OLD:     Vertex *VTo = VMap[To];
:145 OLD:     for (int I = 0; I < VFrom->Neighbors.size(); ++I) {
:146 OLD:         if (VFrom->Neighbors[I]->To == VTo) {
:147 OLD:             VFrom->Neighbors.erase(VFrom->Neighbors.begin() + I);
:148 OLD:             delete VFrom->Neighbors[I];
:149 OLD:             Disconnected = true;
:150 OLD:             EdgesCount--;
:151 OLD:             break;
:152 OLD:         }
:153 OLD:     }
:154 OLD:     if (DirectionalEdges && Disconnected) {
:155 OLD:         for (int I = 0; I < VTo->Neighbors.size(); ++I) {
:156 OLD:             if (VTo->Neighbors[I]->To == VFrom) {
:157 OLD:                 VTo->Neighbors.erase(VTo->Neighbors.begin() + I);
:158 OLD:                 delete VTo->Neighbors[I];
:159 OLD:                 EdgesCount--;
:160 OLD:                 break;
:161 OLD:             }
:162 OLD:         }
:    NEW:   bool Disconnected = false;
:    NEW:   Vertex *VFrom = VMap[From];
:    NEW:   Vertex *VTo = VMap[To];
:    NEW:   for (int I = 0; I < VFrom->Neighbors.size(); ++I) {
:    NEW:     if (VFrom->Neighbors[I]->To == VTo) {
:    NEW:       VFrom->Neighbors.erase(VFrom->Neighbors.begin() + I);
:    NEW:       delete VFrom->Neighbors[I];
:    NEW:       Disconnected = true;
:    NEW:       EdgesCount--;
:    NEW:       break;
:    NEW:     }
:    NEW:   }
:    NEW:   if (DirectionalEdges && Disconnected) {
:    NEW:     for (int I = 0; I < VTo->Neighbors.size(); ++I) {
:    NEW:       if (VTo->Neighbors[I]->To == VFrom) {
:    NEW:         VTo->Neighbors.erase(VTo->Neighbors.begin() + I);
:    NEW:         delete VTo->Neighbors[I];
:    NEW:         EdgesCount--;
:    NEW:         break;
:    NEW:       }
:164 OLD:     return Disconnected;
:    NEW:   }
:    NEW:   return Disconnected;
:169 OLD:     if (VMap.count(StartLabel) == 1) {
:170 OLD:         stack<Vertex *> Stk;
:171 OLD:         set<Vertex *> Vis;
:172 OLD:         Stk.push(VMap[StartLabel]);
:173 OLD:         Vis.insert(VMap[StartLabel]);
:174 OLD:         while (!Stk.empty()) {
:175 OLD:             Vertex *V = Stk.top();
:176 OLD:             Stk.pop();
:177 OLD:             Visit(V->Label);
:178 OLD:             vector<Edge *> List = V->Neighbors;
:179 OLD:             sort(List.begin(), List.end(), descendingOrder);
:180 OLD:             for (Edge *E : List) {
:181 OLD:                 if (Vis.count(E->To) == 0) {
:182 OLD:                     Vis.insert(E->To);
:183 OLD:                     Stk.push(E->To);
:184 OLD:                 }
:185 OLD:             }
:    NEW:   if (VMap.count(StartLabel) == 1) {
:    NEW:     stack<Vertex *> Stk;
:    NEW:     set<Vertex *> Vis;
:    NEW:     Stk.push(VMap[StartLabel]);
:    NEW:     Vis.insert(VMap[StartLabel]);
:    NEW:     while (!Stk.empty()) {
:    NEW:       Vertex *V = Stk.top();
:    NEW:       Stk.pop();
:    NEW:       Visit(V->Label);
:    NEW:       vector<Edge *> List = V->Neighbors;
:    NEW:       sort(List.begin(), List.end(), descendingOrder);
:    NEW:       for (Edge *E : List) {
:    NEW:         if (Vis.count(E->To) == 0) {
:    NEW:           Vis.insert(E->To);
:    NEW:           Stk.push(E->To);
:    NEW:       }
:    NEW:   }
:193 OLD:     if (VMap.count(StartLabel) == 1) {
:194 OLD:         queue<Vertex *> Q;
:195 OLD:         set<Vertex *> Vis;
:196 OLD:         Q.push(VMap[StartLabel]);
:197 OLD:         Vis.insert(VMap[StartLabel]);
:198 OLD:         while (!Q.empty()) {
:199 OLD:             Vertex *V = Q.front();
:200 OLD:             Q.pop();
:201 OLD:             Visit(V->Label);
:202 OLD:             vector<Edge *> List = V->Neighbors;
:203 OLD:             sort(List.begin(), List.end(), compareEdges);
:204 OLD:             for (Edge *E : List) {
:205 OLD:                 if (Vis.count(E->To) == 0) {
:206 OLD:                     Vis.insert(E->To);
:207 OLD:                     Q.push(E->To);
:208 OLD:                 }
:209 OLD:             }
:    NEW:   if (VMap.count(StartLabel) == 1) {
:    NEW:     queue<Vertex *> Q;
:    NEW:     set<Vertex *> Vis;
:    NEW:     Q.push(VMap[StartLabel]);
:    NEW:     Vis.insert(VMap[StartLabel]);
:    NEW:     while (!Q.empty()) {
:    NEW:       Vertex *V = Q.front();
:    NEW:       Q.pop();
:    NEW:       Visit(V->Label);
:    NEW:       vector<Edge *> List = V->Neighbors;
:    NEW:       sort(List.begin(), List.end(), compareEdges);
:    NEW:       for (Edge *E : List) {
:    NEW:         if (Vis.count(E->To) == 0) {
:    NEW:           Vis.insert(E->To);
:    NEW:           Q.push(E->To);
:    NEW:       }
:    NEW:   }
:218 OLD:     map<string, int> Weights;
:219 OLD:     map<string, int> Distances;
:220 OLD:     map<string, string> Previous;
:221 OLD:     if (VMap.count(StartLabel) == 0)
:222 OLD:         return make_pair(Weights, Previous);
:223 OLD:     priority_queue<VPair, vector<VPair>, CustomCompare> Pq;
:224 OLD:     for (const auto &Val: VMap) {
:225 OLD:         Distances[Val.first] = INT_MAX;
:226 OLD:         Pq.push(make_pair(Val.first, INT_MAX));
:227 OLD:     }
:228 OLD:     Pq.push(make_pair(StartLabel, 0));
:229 OLD:     Distances[StartLabel] = 0;
:230 OLD:     while (!Pq.empty()) {
:231 OLD:         string Curr = Pq.top().first;
:232 OLD:         Pq.pop();
:233 OLD:         vector<Edge *> List = VMap.at(Curr)->Neighbors;
:234 OLD:         for (Edge *E: List) {
:235 OLD:             if (Distances[Curr] != INT_MAX) {
:236 OLD:                 int Weight = Distances[Curr] + E->Weight;
:237 OLD:                 if (Weight < Distances[E->To->Label]) {
:238 OLD:                     Distances[E->To->Label] = Weight;
:239 OLD:                     Previous[E->To->Label] = Curr;
:240 OLD:                     Pq.push(make_pair(E->To->Label, Weight));
:241 OLD:                 }
:242 OLD:             }
:    NEW:   map<string, int> Weights;
:    NEW:   map<string, int> Distances;
:    NEW:   map<string, string> Previous;
:    NEW:   if (VMap.count(StartLabel) == 0)
:    NEW:     return make_pair(Weights, Previous);
:    NEW:   priority_queue<VPair, vector<VPair>, CustomCompare> Pq;
:    NEW:   for (const auto &Val : VMap) {
:    NEW:     Distances[Val.first] = INT_MAX;
:    NEW:     Pq.push(make_pair(Val.first, INT_MAX));
:    NEW:   }
:    NEW:   Pq.push(make_pair(StartLabel, 0));
:    NEW:   Distances[StartLabel] = 0;
:    NEW:   while (!Pq.empty()) {
:    NEW:     string Curr = Pq.top().first;
:    NEW:     Pq.pop();
:    NEW:     vector<Edge *> List = VMap.at(Curr)->Neighbors;
:    NEW:     for (Edge *E : List) {
:    NEW:       if (Distances[Curr] != INT_MAX) {
:    NEW:         int Weight = Distances[Curr] + E->Weight;
:    NEW:         if (Weight < Distances[E->To->Label]) {
:    NEW:           Distances[E->To->Label] = Weight;
:    NEW:           Previous[E->To->Label] = Curr;
:    NEW:           Pq.push(make_pair(E->To->Label, Weight));
:    NEW:       }
:245 OLD:     for (const auto &Val: Distances) {
:246 OLD:         if (Val.second != INT_MAX && Val.second != 0)
:247 OLD:             Weights[Val.first] = Val.second;
:248 OLD:     }
:249 OLD:     return make_pair(Weights, Previous);
:    NEW:   }
:    NEW:   for (const auto &Val : Distances) {
:    NEW:     if (Val.second != INT_MAX && Val.second != 0)
:    NEW:       Weights[Val.first] = Val.second;
:    NEW:   }
:    NEW:   return make_pair(Weights, Previous);
:256 OLD: int Graph::mst(const string &StartLabel, void Visit(const string &From, const
:257 OLD: string &To, int Weight)) const {
:258 OLD:     assert(!DirectionalEdges);
:259 OLD:     auto Length = 0;
:260 OLD:     if (VMap.count(StartLabel) == 0)
:261 OLD:         return -1;
:262 OLD:     set<string> Vis;
:263 OLD:     map<string, string> Parent;
:264 OLD:     map<string, int> Keys;
:265 OLD:     priority_queue<VPair, vector<VPair>, CustomCompare> Pq;
:266 OLD:     for (const auto &Val: VMap)
:267 OLD:         Keys[Val.first] = INT_MAX;
:268 OLD:     Pq.push(make_pair(StartLabel, 0));
:269 OLD:     Keys[StartLabel] = 0;
:270 OLD:     while (!Pq.empty()) {
:271 OLD:         string Curr = Pq.top().first;
:272 OLD:         Pq.pop();
:273 OLD:         Vis.insert(Curr);
:274 OLD:         vector<Edge *> List = VMap.at(Curr)->Neighbors;
:275 OLD:         for (Edge *E: List) {
:276 OLD: 
:277 OLD:             string V = E->To->Label;
:278 OLD:             int Weight = E->Weight;
:279 OLD:             if (Vis.count(V) == 0 && Keys[V] > Weight) {
:280 OLD:                 Keys[V] = Weight;
:281 OLD:                 Pq.push(make_pair(V, Keys[V]));
:282 OLD:                 Parent[V] = Curr;
:283 OLD:             }
:284 OLD:         }
:285 OLD:     }
:286 OLD:     for (const auto &Val: Parent) {
:287 OLD:         int W = Keys[Val.first];
:288 OLD:         Visit(Val.second, Val.first, W);
:289 OLD:         Length += W;
:290 OLD:     }
:291 OLD:     return Length;
:    NEW: int Graph::mst(const string &StartLabel,
:    NEW:                void Visit(const string &From, const string &To,
:    NEW:                           int Weight)) const {
:    NEW:   assert(!DirectionalEdges);
:    NEW:   auto Length = 0;
:    NEW:   if (VMap.count(StartLabel) == 0)
:    NEW:     return -1;
:    NEW:   set<string> Vis;
:    NEW:   map<string, string> Parent;
:    NEW:   map<string, int> Keys;
:    NEW:   priority_queue<VPair, vector<VPair>, CustomCompare> Pq;
:    NEW:   for (const auto &Val : VMap)
:    NEW:     Keys[Val.first] = INT_MAX;
:    NEW:   Pq.push(make_pair(StartLabel, 0));
:    NEW:   Keys[StartLabel] = 0;
:    NEW:   while (!Pq.empty()) {
:    NEW:     string Curr = Pq.top().first;
:    NEW:     Pq.pop();
:    NEW:     Vis.insert(Curr);
:    NEW:     vector<Edge *> List = VMap.at(Curr)->Neighbors;
:    NEW:     for (Edge *E : List) {
:    NEW: 
:    NEW:       string V = E->To->Label;
:    NEW:       int Weight = E->Weight;
:    NEW:       if (Vis.count(V) == 0 && Keys[V] > Weight) {
:    NEW:         Keys[V] = Weight;
:    NEW:         Pq.push(make_pair(V, Keys[V]));
:    NEW:         Parent[V] = Curr;
:    NEW:       }
:    NEW:     }
:    NEW:   }
:    NEW:   for (const auto &Val : Parent) {
:    NEW:     int W = Keys[Val.first];
:    NEW:     Visit(Val.second, Val.first, W);
:    NEW:     Length += W;
:    NEW:   }
:    NEW:   return Length;
:294 OLD: //helper method to check if two vertices are connected
:    NEW: // helper method to check if two vertices are connected
:296 OLD:     Vertex *VFrom = VMap.at(From);
:297 OLD:     Vertex *VTo = VMap.at(To);
:298 OLD:     for (auto Neighbor : VFrom->Neighbors) {
:299 OLD:         if (Neighbor->To == VTo)
:300 OLD:             return true;
:301 OLD:     }
:302 OLD:     return false;
:    NEW:   Vertex *VFrom = VMap.at(From);
:    NEW:   Vertex *VTo = VMap.at(To);
:    NEW:   for (auto Neighbor : VFrom->Neighbors) {
:    NEW:     if (Neighbor->To == VTo)
:    NEW:       return true;
:    NEW:   }
:    NEW:   return false;
:305 OLD: //edge comparator for descending sorting
:    NEW: // edge comparator for descending sorting
:307 OLD:     int CompareLabels = E1->To->Label.compare(E2->To->Label);
:308 OLD:     if (CompareLabels == 0)
:309 OLD:         return (E2->Weight - E1->Weight) > 0;
:310 OLD:     return CompareLabels > 0;
:    NEW:   int CompareLabels = E1->To->Label.compare(E2->To->Label);
:    NEW:   if (CompareLabels == 0)
:    NEW:     return (E2->Weight - E1->Weight) > 0;
:    NEW:   return CompareLabels > 0;
:312 OLD: 
*** formatting suggestions for ./graphtest.cpp
:037 OLD:       SS << "[" << From << To << " " << Weight << "]";
:    NEW:     SS << "[" << From << To << " " << Weight << "]";
:046 OLD: template<typename K, typename L>
:    NEW: template <typename K, typename L>
:048 OLD:     stringstream Out;
:049 OLD:     for (auto &P : Mp)
:050 OLD:         Out << "[" << P.first << ":" << P.second << "]";
:051 OLD:     return Out.str();
:    NEW:   stringstream Out;
:    NEW:   for (auto &P : Mp)
:    NEW:     Out << "[" << P.first << ":" << P.second << "]";
:    NEW:   return Out.str();
:055 OLD:     Graph G;
:056 OLD:     assert(G.add("a") && "add vertex a");
:057 OLD:     assert(G.add("b") && "add vertex b");
:058 OLD:     assert(G.add("c") && "add vertex c");
:059 OLD:     assert(G.add("d") && "add vertex d");
:060 OLD:     assert(G.add("e") && "add vertex e");
:061 OLD:     assert(!G.add("b") && "b added twice");
:062 OLD:     assert(G.connect("a", "b", 10) && "connect a b");
:063 OLD:     assert(!G.connect("a", "b", 50) && "duplicate connect a b");
:064 OLD:     assert(!G.connect("a", "a", 1) && "connect a to itself");
:065 OLD:     G.connect("a", "d", 40);
:066 OLD:     G.connect("a", "c", 20);
:067 OLD:     assert((G.verticesSize() == 5) && "graph number of vertices");
:068 OLD:     assert((G.edgesSize() == 3) && "graph number of edges");
:069 OLD:     assert((G.neighborsSize("a") == 3) && "vertex number of edges");
:070 OLD:     assert((G.neighborsSize("c") == 0) && "no outgoing edges c");
:071 OLD:     assert((G.neighborsSize("xxx") == -1) && "no edges for xxx");
:072 OLD:     assert(!G.contains("xxx") && "xxx not in graph");
:073 OLD:     assert(G.contains("a") && "a in graph");
:074 OLD: 
:075 OLD:     // check that they are sorted based on edge end label
:076 OLD:     assert(G.getEdgesAsString("a") == "b(10),c(20),d(40)");
:077 OLD:     // disconnect non-existent edge/vertex
:078 OLD:     assert(!G.disconnect("a", "e") && "disconnecting non-existent vertex");
:079 OLD:     assert((G.edgesSize() == 3) && "disconnected nonexisting");
:080 OLD:     assert(G.disconnect("a", "c") && "a-c disconnect");
:081 OLD:     assert((G.edgesSize() == 2) && "number of edges after disconnect");
:082 OLD:     assert((G.neighborsSize("a") == 2) && "a has 2 edges");
:083 OLD:     assert(G.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
:    NEW:   Graph G;
:    NEW:   assert(G.add("a") && "add vertex a");
:    NEW:   assert(G.add("b") && "add vertex b");
:    NEW:   assert(G.add("c") && "add vertex c");
:    NEW:   assert(G.add("d") && "add vertex d");
:    NEW:   assert(G.add("e") && "add vertex e");
:    NEW:   assert(!G.add("b") && "b added twice");
:    NEW:   assert(G.connect("a", "b", 10) && "connect a b");
:    NEW:   assert(!G.connect("a", "b", 50) && "duplicate connect a b");
:    NEW:   assert(!G.connect("a", "a", 1) && "connect a to itself");
:    NEW:   G.connect("a", "d", 40);
:    NEW:   G.connect("a", "c", 20);
:    NEW:   assert((G.verticesSize() == 5) && "graph number of vertices");
:    NEW:   assert((G.edgesSize() == 3) && "graph number of edges");
:    NEW:   assert((G.neighborsSize("a") == 3) && "vertex number of edges");
:    NEW:   assert((G.neighborsSize("c") == 0) && "no outgoing edges c");
:    NEW:   assert((G.neighborsSize("xxx") == -1) && "no edges for xxx");
:    NEW:   assert(!G.contains("xxx") && "xxx not in graph");
:    NEW:   assert(G.contains("a") && "a in graph");
:    NEW: 
:    NEW:   // check that they are sorted based on edge end label
:    NEW:   assert(G.getEdgesAsString("a") == "b(10),c(20),d(40)");
:    NEW:   // disconnect non-existent edge/vertex
:    NEW:   assert(!G.disconnect("a", "e") && "disconnecting non-existent vertex");
:    NEW:   assert((G.edgesSize() == 3) && "disconnected nonexisting");
:    NEW:   assert(G.disconnect("a", "c") && "a-c disconnect");
:    NEW:   assert((G.edgesSize() == 2) && "number of edges after disconnect");
:    NEW:   assert((G.neighborsSize("a") == 2) && "a has 2 edges");
:    NEW:   assert(G.getEdgesAsString("a") == "b(10),d(40)" && "removing middle edge");
:087 OLD:     cout << "testGraph0DFS" << endl;
:088 OLD:     Graph G;
:089 OLD:     if (!G.readFile("graph0.txt"))
:090 OLD:         return;
:091 OLD:     assert(G.contains("A") && "a in graph");
:092 OLD:     assert(G.contains("B") && "b in graph");
:093 OLD:     assert(G.contains("C") && "c in graph");
:094 OLD:     assert(G.getEdgesAsString("A") == "B(1),C(8)");
:095 OLD:     assert(G.getEdgesAsString("B") == "C(3)");
:096 OLD:     assert(G.getEdgesAsString("C").empty());
:097 OLD: 
:098 OLD:     Tester::resetSs();
:099 OLD:     G.dfs("A", Tester::labelVisitor);
:100 OLD:     assert(Tester::getSs() == "ABC" && "starting from A");
:101 OLD: 
:102 OLD:     Tester::resetSs();
:103 OLD:     G.dfs("B", Tester::labelVisitor);
:104 OLD:     assert(Tester::getSs() == "BC" && "starting from B");
:105 OLD: 
:106 OLD:     Tester::resetSs();
:107 OLD:     G.dfs("C", Tester::labelVisitor);
:108 OLD:     assert(Tester::getSs() == "C" && "starting from C");
:109 OLD: 
:110 OLD:     Tester::resetSs();
:111 OLD:     G.dfs("X", Tester::labelVisitor);
:112 OLD:     assert(Tester::getSs().empty() && "starting from X");
:    NEW:   cout << "testGraph0DFS" << endl;
:    NEW:   Graph G;
:    NEW:   if (!G.readFile("graph0.txt"))
:    NEW:     return;
:    NEW:   assert(G.contains("A") && "a in graph");
:    NEW:   assert(G.contains("B") && "b in graph");
:    NEW:   assert(G.contains("C") && "c in graph");
:    NEW:   assert(G.getEdgesAsString("A") == "B(1),C(8)");
:    NEW:   assert(G.getEdgesAsString("B") == "C(3)");
:    NEW:   assert(G.getEdgesAsString("C").empty());
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("A", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "ABC" && "starting from A");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("B", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "BC" && "starting from B");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("C", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "C" && "starting from C");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("X", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs().empty() && "starting from X");
:116 OLD:     cout << "testGraph0BFS" << endl;
:117 OLD:     Graph G;
:118 OLD:     if (!G.readFile("graph0.txt"))
:119 OLD:         return;
:120 OLD: 
:121 OLD:     Tester::resetSs();
:122 OLD:     G.bfs("A", Tester::labelVisitor);
:123 OLD:     assert(Tester::getSs() == "ABC" && "starting from A");
:124 OLD: 
:125 OLD:     Tester::resetSs();
:126 OLD:     G.dfs("B", Tester::labelVisitor);
:127 OLD:     assert(Tester::getSs() == "BC" && "starting from B");
:128 OLD: 
:129 OLD:     Tester::resetSs();
:130 OLD:     G.dfs("C", Tester::labelVisitor);
:131 OLD:     assert(Tester::getSs() == "C" && "starting from C");
:132 OLD: 
:133 OLD:     Tester::resetSs();
:134 OLD:     G.dfs("X", Tester::labelVisitor);
:135 OLD:     assert(Tester::getSs().empty() && "starting from X");
:    NEW:   cout << "testGraph0BFS" << endl;
:    NEW:   Graph G;
:    NEW:   if (!G.readFile("graph0.txt"))
:    NEW:     return;
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.bfs("A", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "ABC" && "starting from A");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("B", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "BC" && "starting from B");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("C", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "C" && "starting from C");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("X", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs().empty() && "starting from X");
:139 OLD:     cout << "testGraph0Dijkstra" << endl;
:140 OLD:     Graph G;
:141 OLD:     if (!G.readFile("graph0.txt"))
:142 OLD:         return;
:143 OLD:     map<string, int> Weights;
:144 OLD:     map<string, string> Previous;
:145 OLD:     tie(Weights, Previous) = G.dijkstra("A");
:146 OLD:     // cout << "Dijkstra(A) weights is " << map2string(weights) << endl;
:147 OLD:     assert(map2string(Weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
:148 OLD:     // cout << "Dijkstra(A) previous is " << map2string(previous) << endl;
:149 OLD:     assert(map2string(Previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
:150 OLD: 
:151 OLD:     tie(Weights, Previous) = G.dijkstra("B");
:152 OLD:     assert(map2string(Weights) == "[C:3]" && "Dijkstra(B) weights");
:153 OLD:     assert(map2string(Previous) == "[C:B]" && "Dijkstra(B) previous");
:154 OLD: 
:155 OLD:     tie(Weights, Previous) = G.dijkstra("X");
:156 OLD:     assert(map2string(Weights).empty() && "Dijkstra(C) weights");
:157 OLD:     assert(map2string(Previous).empty() && "Dijkstra(C) previous");
:    NEW:   cout << "testGraph0Dijkstra" << endl;
:    NEW:   Graph G;
:    NEW:   if (!G.readFile("graph0.txt"))
:    NEW:     return;
:    NEW:   map<string, int> Weights;
:    NEW:   map<string, string> Previous;
:    NEW:   tie(Weights, Previous) = G.dijkstra("A");
:    NEW:   // cout << "Dijkstra(A) weights is " << map2string(weights) << endl;
:    NEW:   assert(map2string(Weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
:    NEW:   // cout << "Dijkstra(A) previous is " << map2string(previous) << endl;
:    NEW:   assert(map2string(Previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
:    NEW: 
:    NEW:   tie(Weights, Previous) = G.dijkstra("B");
:    NEW:   assert(map2string(Weights) == "[C:3]" && "Dijkstra(B) weights");
:    NEW:   assert(map2string(Previous) == "[C:B]" && "Dijkstra(B) previous");
:    NEW: 
:    NEW:   tie(Weights, Previous) = G.dijkstra("X");
:    NEW:   assert(map2string(Weights).empty() && "Dijkstra(C) weights");
:    NEW:   assert(map2string(Previous).empty() && "Dijkstra(C) previous");
:161 OLD:     cout << "testGraph0NotDirected" << endl;
:162 OLD:     bool IsDirectional = false;
:163 OLD:     Graph G(IsDirectional);
:164 OLD:     if (!G.readFile("graph0.txt"))
:165 OLD:         return;
:166 OLD: 
:167 OLD:     Tester::resetSs();
:168 OLD:     G.bfs("A", Tester::labelVisitor);
:169 OLD:     assert(Tester::getSs() == "ABC" && "starting from A");
:170 OLD: 
:171 OLD:     Tester::resetSs();
:172 OLD:     G.dfs("B", Tester::labelVisitor);
:173 OLD:     assert(Tester::getSs() == "BAC" && "starting from B");
:174 OLD: 
:175 OLD:     Tester::resetSs();
:176 OLD:     G.dfs("C", Tester::labelVisitor);
:177 OLD:     assert(Tester::getSs() == "CAB" && "starting from C");
:178 OLD: 
:179 OLD:     Tester::resetSs();
:180 OLD:     G.dfs("X", Tester::labelVisitor);
:181 OLD:     assert(Tester::getSs().empty() && "starting from X");
:182 OLD: 
:183 OLD:     map<string, int> Weights;
:184 OLD:     map<string, string> Previous;
:185 OLD:     tie(Weights, Previous) = G.dijkstra("A");
:186 OLD:     // cout << "Dijkstra(A) weights is " << map2string(weights) << endl;
:187 OLD:     assert(map2string(Weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
:188 OLD:     // cout << "Dijkstra(A) previous is " << map2string(previous) << endl;
:189 OLD:     assert(map2string(Previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
:190 OLD: 
:191 OLD:     tie(Weights, Previous) = G.dijkstra("B");
:192 OLD:     assert(map2string(Weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
:193 OLD:     assert(map2string(Previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
:194 OLD: 
:195 OLD:     tie(Weights, Previous) = G.dijkstra("X");
:196 OLD:     assert(map2string(Weights).empty() && "Dijkstra(C) weights");
:197 OLD:     assert(map2string(Previous).empty() && "Dijkstra(C) previous");
:198 OLD: 
:199 OLD:     Tester::resetSs();
:200 OLD:     int MstLength = G.mst("A", Tester::edgeVisitor);
:201 OLD:     assert(MstLength == 4 && "mst A is 4");
:202 OLD:     assert(Tester::getSs() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
:203 OLD: 
:204 OLD:     Tester::resetSs();
:205 OLD:     MstLength = G.mst("B", Tester::edgeVisitor);
:206 OLD:     assert(MstLength == 4 && "mst 4 is 4");
:207 OLD:     assert(Tester::getSs() == "[BA 1][BC 3]");
:208 OLD: 
:209 OLD:     Tester::resetSs();
:210 OLD:     MstLength = G.mst("C", Tester::edgeVisitor);
:211 OLD:     assert(MstLength == 4 && "mst C is 4");
:212 OLD:     cout << Tester::getSs() << endl;
:213 OLD:     //Commented out because th oder of the displaying of edges is not the same
:214 OLD:     // .However all edges are part of the correct solution.
:215 OLD:     //assert(Tester::getSs() == "[CB 3][BA 1]");
:216 OLD: 
:217 OLD:     Tester::resetSs();
:218 OLD:     MstLength = G.mst("X", Tester::edgeVisitor);
:219 OLD:     assert(MstLength == -1 && "mst X is -1");
:220 OLD:     assert(Tester::getSs().empty() && "mst for vertex not found");
:    NEW:   cout << "testGraph0NotDirected" << endl;
:    NEW:   bool IsDirectional = false;
:    NEW:   Graph G(IsDirectional);
:    NEW:   if (!G.readFile("graph0.txt"))
:    NEW:     return;
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.bfs("A", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "ABC" && "starting from A");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("B", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "BAC" && "starting from B");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("C", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "CAB" && "starting from C");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("X", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs().empty() && "starting from X");
:    NEW: 
:    NEW:   map<string, int> Weights;
:    NEW:   map<string, string> Previous;
:    NEW:   tie(Weights, Previous) = G.dijkstra("A");
:    NEW:   // cout << "Dijkstra(A) weights is " << map2string(weights) << endl;
:    NEW:   assert(map2string(Weights) == "[B:1][C:4]" && "Dijkstra(A) weights");
:    NEW:   // cout << "Dijkstra(A) previous is " << map2string(previous) << endl;
:    NEW:   assert(map2string(Previous) == "[B:A][C:B]" && "Dijkstra(A) previous");
:    NEW: 
:    NEW:   tie(Weights, Previous) = G.dijkstra("B");
:    NEW:   assert(map2string(Weights) == "[A:1][C:3]" && "Dijkstra(B) weights");
:    NEW:   assert(map2string(Previous) == "[A:B][C:B]" && "Dijkstra(B) previous");
:    NEW: 
:    NEW:   tie(Weights, Previous) = G.dijkstra("X");
:    NEW:   assert(map2string(Weights).empty() && "Dijkstra(C) weights");
:    NEW:   assert(map2string(Previous).empty() && "Dijkstra(C) previous");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   int MstLength = G.mst("A", Tester::edgeVisitor);
:    NEW:   assert(MstLength == 4 && "mst A is 4");
:    NEW:   assert(Tester::getSs() == "[AB 1][BC 3]" && "mst A is [AB 1][BC 3]");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   MstLength = G.mst("B", Tester::edgeVisitor);
:    NEW:   assert(MstLength == 4 && "mst 4 is 4");
:    NEW:   assert(Tester::getSs() == "[BA 1][BC 3]");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   MstLength = G.mst("C", Tester::edgeVisitor);
:    NEW:   assert(MstLength == 4 && "mst C is 4");
:    NEW:   cout << Tester::getSs() << endl;
:    NEW:   // Commented out because th oder of the displaying of edges is not the same
:    NEW:   // .However all edges are part of the correct solution.
:    NEW:   // assert(Tester::getSs() == "[CB 3][BA 1]");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   MstLength = G.mst("X", Tester::edgeVisitor);
:    NEW:   assert(MstLength == -1 && "mst X is -1");
:    NEW:   assert(Tester::getSs().empty() && "mst for vertex not found");
:224 OLD:     cout << "testGraph1" << endl;
:225 OLD:     Graph G;
:226 OLD:     if (!G.readFile("graph1.txt"))
:227 OLD:         return;
:228 OLD:     Tester::resetSs();
:229 OLD:     G.dfs("A", Tester::labelVisitor);
:230 OLD:     assert(Tester::getSs() == "ABCDEFGH" && "dfs starting from A");
:231 OLD: 
:232 OLD:     Tester::resetSs();
:233 OLD:     G.bfs("A", Tester::labelVisitor);
:234 OLD:     assert(Tester::getSs() == "ABHCGDEF" && "bfs starting from A");
:235 OLD: 
:236 OLD:     Tester::resetSs();
:237 OLD:     G.dfs("B", Tester::labelVisitor);
:238 OLD:     assert(Tester::getSs() == "BCDEFG" && "dfs starting from B");
:239 OLD: 
:240 OLD:     Tester::resetSs();
:241 OLD:     G.bfs("B", Tester::labelVisitor);
:242 OLD:     assert(Tester::getSs() == "BCDEFG" && "bfs starting from B");
:243 OLD: 
:244 OLD:     map<string, int> Weights;
:245 OLD:     map<string, string> Previous;
:246 OLD:     auto P = G.dijkstra("A");
:247 OLD:     Weights = P.first;
:248 OLD:     Previous = P.second;
:249 OLD:     assert(map2string(Weights) == "[B:1][C:2][D:3][E:4][F:5][G:4][H:3]" &&
:250 OLD:             "Dijkstra(B) weights");
:251 OLD:     assert(map2string(Previous) == "[B:A][C:B][D:C][E:D][F:E][G:H][H:A]" &&
:252 OLD:             "Dijkstra(B) previous");
:    NEW:   cout << "testGraph1" << endl;
:    NEW:   Graph G;
:    NEW:   if (!G.readFile("graph1.txt"))
:    NEW:     return;
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("A", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "ABCDEFGH" && "dfs starting from A");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.bfs("A", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "ABHCGDEF" && "bfs starting from A");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.dfs("B", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "BCDEFG" && "dfs starting from B");
:    NEW: 
:    NEW:   Tester::resetSs();
:    NEW:   G.bfs("B", Tester::labelVisitor);
:    NEW:   assert(Tester::getSs() == "BCDEFG" && "bfs starting from B");
:    NEW: 
:    NEW:   map<string, int> Weights;
:    NEW:   map<string, string> Previous;
:    NEW:   auto P = G.dijkstra("A");
:    NEW:   Weights = P.first;
:    NEW:   Previous = P.second;
:    NEW:   assert(map2string(Weights) == "[B:1][C:2][D:3][E:4][F:5][G:4][H:3]" &&
:    NEW:          "Dijkstra(B) weights");
:    NEW:   assert(map2string(Previous) == "[B:A][C:B][D:C][E:D][F:E][G:H][H:A]" &&
:    NEW:          "Dijkstra(B) previous");
:256 OLD:     testGraphBasic();
:257 OLD:     testGraph0DFS();
:258 OLD:     testGraph0BFS();
:259 OLD:     testGraph0Dijkstra();
:260 OLD:     testGraph0NotDirected();
:261 OLD:     testGraph1();
:    NEW:   testGraphBasic();
:    NEW:   testGraph0DFS();
:    NEW:   testGraph0BFS();
:    NEW:   testGraph0Dijkstra();
:    NEW:   testGraph0NotDirected();
:    NEW:   testGraph1();
*** formatting suggestions for ./main.cpp
*** formatting suggestions for ./vertex.cpp
:017 OLD: //overloaded ostream operator
:    NEW: // overloaded ostream operator
:019 OLD:     Os << V.Label;
:020 OLD:     return Os;
:    NEW:   Os << V.Label;
:    NEW:   return Os;
:030 OLD:     for (auto E: Neighbors)
:031 OLD:         delete E;
:    NEW:   for (auto E : Neighbors)
:    NEW:     delete E;
===================================================================
*** running valgrind to detect memory leaks
==691==     in use at exit: 0 bytes in 0 blocks
===================================================================
*** compiling with clang++ to checking for memory leaks
===================================================================
*** running myprogram with memory checking
testGraph0DFS
testGraph0BFS
testGraph0Dijkstra
testGraph0NotDirected
[BA 1][CB 3]
testGraph1
Done!
===================================================================
*** using --analyze option for clang++ to detect issues
===================================================================
*** cleaning up, deleting myprogram, myprogram.dSYM and core
===================================================================
Tue Feb 11 02:53:29 PST 2020
===================================================================
./simplecompile.sh exiting with 0
